openapi: 3.0.0
info:
  title: Healthcare Management API
  version: 1.0.0
  description: API for managing healthcare services including doctors, nurses, members, and more

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.healthcare.com/v1
    description: Production server

tags:
  - name: Auth
    description: Authentication operations
  - name: Admin
    description: Administrative operations
  - name: Navigator
    description: Navigator operations
  - name: Doctor
    description: Doctor operations
  - name: Nurse
    description: Nurse operations
  - name: Member
    description: Member management
  - name: School
    description: School management
  - name: Assessment
    description: Health assessment operations
  - name: Appointment
    description: Appointment management
  - name: Blog
    description: Blog operations
  - name: Product
    description: Product management
  - name: Order
    description: Order management
  - name: Subscription
    description: Subscription and addon management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Address:
      type: object
      properties:
        description:
          type: string
        pinCode:
          type: string
        region:
          type: string
        landmark:
          type: string
        state:
          type: string
        country:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number

    TimeSlot:
      type: object
      properties:
        day:
          type: string
        from:
          type: string
        to:
          type: string

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        dob:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other]
        profilePic:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Doctor:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            qualification:
              type: array
              items:
                type: string
            medicalCouncilRegistrationNumber:
              type: string
            experienceYears:
              type: number
            languagesSpoken:
              type: array
              items:
                type: string
            serviceTypes:
              type: array
              items:
                type: string
                enum: [online, offline]
            introduction:
              type: string
            onlineConsultationTimeSlots:
              type: array
              items:
                $ref: '#/components/schemas/TimeSlot'
            offlineConsultationTimeSlots:
              type: array
              items:
                $ref: '#/components/schemas/TimeSlot'
            digitalSignature:
              type: string
            areas:
              type: array
              items:
                type: string
            total_assigned_members:
              type: number
            rating:
              type: number

    Member:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            memberId:
              type: string
            AHIdentityCard:
              type: string
            isStudent:
              type: boolean
            isSubprofile:
              type: boolean
            primaryMemberId:
              type: string
            emergencyContact:
              type: object
              properties:
                name:
                  type: string
                relation:
                  type: string
                phone:
                  type: string
            bloodGroup:
              type: string
            heightInFt:
              type: number
            weightInKg:
              type: number
            address:
              $ref: '#/components/schemas/Address'
            healthcareTeam:
              type: object
              properties:
                navigator:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    assignedDate:
                      type: string
                      format: date-time
                doctor:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    assignedDate:
                      type: string
                      format: date-time
                nurse:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    assignedDate:
                      type: string
                      format: date-time

    Appointment:
      type: object
      properties:
        _id:
          type: string
        memberId:
          type: string
        doctorId:
          type: string
        navigatorId:
          type: string
        appointmentDateTime:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, ongoing, cancelled, completed]
        appointmentType:
          type: string
          enum: [online, offline]
        additionalInfo:
          type: string
        notes:
          type: string
        prescription:
          type: object
          properties:
            chiefComplaints:
              type: string
            allergies:
              type: string
            history:
              type: string
            diagnosis:
              type: string
            medicines:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  dosage:
                    type: string
                  frequency:
                    type: string
                  duration:
                    type: string
                  investigations:
                    type: string
                  treatmentPlan:
                    type: string
            additionalInstructions:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          required: true
        category:
          type: string
        mrp:
          type: number
        discountInPercentage:
          type: number
        sellingPrice:
          type: number
        description:
          type: string
        stock:
          type: number
        images:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
        memberId:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
              price:
                type: number
        totalAmount:
          type: number
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
        shippingAddress:
          $ref: '#/components/schemas/Address'
        paymentDetails:
          type: object
          properties:
            method:
              type: string
            transactionId:
              type: string
            status:
              type: string
        orderDate:
          type: string
          format: date-time
        deliveryDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                userType:
                  type: string
                  enum: [admin, navigator, doctor, nurse, member]
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                userType:
                  type: string
                  enum: [admin, navigator, doctor, nurse, member]
      responses:
        200:
          description: Password reset email sent

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        200:
          description: Password reset successful

  /users/{userType}:
    get:
      tags:
        - Admin
      summary: Get all users of specific type with filters
      parameters:
        - in: path
          name: userType
          required: true
          schema:
            type: string
            enum: [navigators, doctors, nurses, members, students]
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: sortBy
          schema:
            type: string
      responses:
        200:
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Doctor'
                        - $ref: '#/components/schemas/Member'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Admin
      summary: Create new user
      parameters:
        - in: path
          name: userType
          required: true
          schema:
            type: string
            enum: [navigators, doctors, nurses, members, students]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: User created successfully

  /users/{userType}/{id}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      parameters:
        - in: path
          name: userType
          required: true
          schema:
            type: string
            enum: [navigators, doctors, nurses, members, students]
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User details retrieved successfully

    put:
      tags:
        - Admin
      summary: Update user
      parameters:
        - in: path
          name: userType
          required: true
          schema:
            type: string
            enum: [navigators, doctors, nurses, members, students]
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: User updated successfully

    delete:
      tags:
        - Admin
      summary: Delete user
      parameters:
        - in: path
          name: userType
          required: true
          schema:
            type: string
            enum: [navigators, doctors, nurses, members, students]
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully

  /users/{userType}/bulk-upload:
    post:
      tags:
        - Admin
      summary: Bulk upload users
      parameters:
        - in: path
          name: userType
          required: true
          schema:
            type: string
            enum: [members, students]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Bulk upload successful

  /members/assign:
    post:
      tags:
        - Admin
        - Navigator
      summary: Assign member to healthcare team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId:
                  type: string
                doctorId:
                  type: string
                navigatorId:
                  type: string
                nurseId:
                  type: string
      responses:
        200:
          description: Member assigned successfully

  /members/bulk-assign:
    post:
      tags:
        - Admin
        - Navigator
      summary: Bulk assign members
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberIds:
                  type: array
                  items:
                    type: string
                doctorId:
                  type: string
                navigatorId:
                  type: string
                nurseId:
                  type: string
      responses:
        200:
          description: Members assigned successfully

  /appointments:
    get:
      tags:
        - Appointment
      summary: Get appointments with filters
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, ongoing, cancelled, completed]
        - in: query
          name: type
          schema:
            type: string
            enum: [online, offline]
      responses:
        200:
          description: Appointments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Appointment
      summary: Create new appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - memberId
                - doctorId
                - appointmentDateTime
                - type
              properties:
                memberId:
                  type: string
                doctorId:
                  type: string
                appointmentDateTime:
                  type: string
                  format: date-time
                type:
                  type: string
                  enum: [online, offline]
                additionalInfo:
                  type: string
      responses:
        201:
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments/{id}/prescription:
    post:
      tags:
        - Doctor
      summary: Create prescription for appointment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                diagnosis:
                  type: string
                medicines:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      dosage:
                        type: string
                      frequency:
                        type: string
                      duration:
                        type: string
                additionalInstructions:
                  type: string
      responses:
        201:
          description: Prescription created successfully

  /assessments:
    get:
      tags:
        - Assessment
      summary: Get assessments with filters
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: memberId
          schema:
            type: string
      responses:
        200:
          description: Assessments retrieved successfully

    post:
      tags:
        - Assessment
      summary: Create new assessment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Assessment created successfully

  /assessments/bulk-upload:
    post:
      tags:
        - Assessment
      summary: Bulk upload assessments
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Assessments uploaded successfully

  /blogs:
    get:
      tags:
        - Blog
      summary: Get blogs with filters
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [draft, published]
      responses:
        200:
          description: Blogs retrieved successfully

    post:
      tags:
        - Blog
      summary: Create new blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Blog created successfully

  /notifications:
    get:
      tags:
        - Notification
      summary: Get user notifications
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: isRead
          schema:
            type: boolean
      responses:
        200:
          description: Notifications retrieved successfully

  /subscriptions:
    get:
      tags:
        - Subscription
      summary: Get subscription plans
      responses:
        200:
          description: Subscription plans retrieved successfully

    post:
      tags:
        - Subscription
      summary: Create subscription plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                code:
                  type: string
                price:
                  type: number
                duration:
                  type: object
                  properties:
                    value:
                      type: integer
                    unit:
                      type: string
                      enum: [days, months, years]
      responses:
        201:
          description: Subscription plan created successfully

  /addons:
    get:
      tags:
        - Subscription
      summary: Get addon plans
      responses:
        200:
          description: Addon plans retrieved successfully

    post:
      tags:
        - Subscription
      summary: Create addon plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                code:
                  type: string
                price:
                  type: number
                compatiblePlans:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Addon plan created successfully

  /products:
    get:
      tags:
        - Product
      summary: Get products with filters
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [price_asc, price_desc, newest]
      responses:
        200:
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Product
      summary: Create new product
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - mrp
                - sellingPrice
              properties:
                name:
                  type: string
                category:
                  type: string
                mrp:
                  type: number
                discountInPercentage:
                  type: number
                sellingPrice:
                  type: number
                description:
                  type: string
                stock:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      tags:
        - Product
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Product
      summary: Update product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                mrp:
                  type: number
                discountInPercentage:
                  type: number
                sellingPrice:
                  type: number
                description:
                  type: string
                stock:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Product
      summary: Delete product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product deleted successfully
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      tags:
        - Order
      summary: Get orders with filters
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, shipped, delivered, cancelled]
        - in: query
          name: fromDate
          schema:
            type: string
            format: date
        - in: query
          name: toDate
          schema:
            type: string
            format: date
      responses:
        200:
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Order
      summary: Create new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
                - shippingAddress
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: number
                shippingAddress:
                  $ref: '#/components/schemas/Address'
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      tags:
        - Order
      summary: Get order by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Order
      summary: Update order status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, shipped, delivered, cancelled]
      responses:
        200:
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 